apply from: "gradle/dependencies.gradle"

allprojects{
    group = 'com.github.tommyettinger'
    version = "$VERSION_NAME"

    buildscript {
        repositories {
            google()
            mavenCentral()
            maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
            gradlePluginPortal()
        }
    }
    repositories {
        google()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}
buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.25.3'
        classpath "com.badlogicgames.gdx:gdx-jnigen-gradle:2.4.1"
    }
}

apply plugin: 'java-library'
apply plugin: 'com.vanniktech.maven.publish'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
    options.addBooleanOption('use', true);
}
tasks.withType(Test).configureEach {
    systemProperty 'file.encoding', 'UTF-8'
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc).configureEach {
        options.addStringOption('Xdoclint:none,-missing', '-quiet')
    }
}

if (JavaVersion.current().isJava9Compatible()) {
    tasks.withType(Javadoc).configureEach {
        options.addStringOption("-release", "8");
    }
}

configure(subprojects - project(":backends:gdx-backend-android")) {
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: 'java-library'
    apply plugin: 'com.vanniktech.maven.publish'

    compileJava{
        options.fork = true
        options.incremental = true
    }

    jar {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

        archiveBaseName.set("$POM_NAME")
        manifest {
            attributes 'Implementation-Title': "$POM_NAME", 'Implementation-Version': archiveVersion
        }
    }
}

configure(allprojects - project(":backends:gdx-backend-lwjgl3") - project(":backends:gdx-backend-gwt")){
    compileJava {
        sourceCompatibility = 7
        targetCompatibility = 7
        if (JavaVersion.current().isJava9Compatible()) {
            options.release.set(7)
        }
    }
}
configure(project(":backends:gdx-backend-lwjgl3")){
    compileJava {
        sourceCompatibility = 8
        targetCompatibility = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release.set(8)
        }
    }
}
configure(project(":backends:gdx-backend-gwt")){
    compileJava {
        sourceCompatibility = 8
        targetCompatibility = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release.set(8)
        }
    }
}
allprojects {
    buildscript {
        repositories {
            google()
            mavenLocal()
            mavenCentral()
            gradlePluginPortal()
            maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
            maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        }
    }

    repositories {
        google()
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }
    tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
    tasks.withType(ProcessResources).configureEach {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
    tasks.withType(Javadoc).configureEach {
        options.encoding = 'UTF-8'
        options.addBooleanOption('use', true);
    }
    tasks.withType(Test).configureEach {
        systemProperty 'file.encoding', 'UTF-8'
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc).configureEach {
            options.addStringOption('Xdoclint:none,-missing', '-quiet')
        }
    }

	compileTestJava {
		sourceCompatibility = 8
		targetCompatibility = 8
		if (JavaVersion.current().isJava9Compatible()) {
			options.release.set(8)
		}
	}
}
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}